/********
    *
    * Advantage:
    *
    * In the following, a (`t`, `c`, `n`)-attacker is an attacker `A` that runs in time at most `t`,
    * makes at most `c` challenge queries, and never produces a group with more than `n` members.
    * The attacker wins the CGKA security game if they correctly guesses the random bit `b` in
    * the end and the safety predicate `P` evaluates to true on the queries made by the attacker.
    *
    * Hence we define our (`t`, `c` `n`) constants below:
    *
********/

// A constant for missing data
#define NONE 255

/****
  *
  * Security game's parameters' valid ranges:
  *   - T <- [3, 255]
  *   - C <- [1,   T]
  *   - N <- [3, 127]
  *
  * Lookup table for TREE value derived from N:
  *   - [ 1,   1] ->   1
  *   - [ 2,   2] ->   3
  *   - [ 3,   4] ->   7
  *   - [ 5,   8] ->  15
  *   - [ 9,  16] ->  31
  *   - [17,  32] ->  63
  *   - [33,  64] -> 127
  *   - [65, 128] -> 255
  *
****/
#define T    3
#define C    3
#define N    4
#define TREE 7
#define NODE (TREE / 2)
#define ROOT 0


/****
  *
  * Special types required for the protocol.
  *
****/


mtype:Message = { ADD, RMV, UPD };

//typedef Group      { bool         membership[N] };
//typedef Enigma     { mtype:Secret secret[T]     };

/****
  *
  * Global state of the CGKA security game.
  *
****/

bool  challenge[T]; // Has the attacker challenged in an epoch?

bool membership[N]; // Group membership of current epoch
byte   hoarding[N]; // Epoch from which the user saves secrets
bool     unsafe[N]; // Members which require a change to update
//bool epochQuerried[N]; 


/****
  *
  * Global state of the attacker.
  *
****/

//        Void - This node does not exist  and there exists 0 leaves in the subtree
// UnknownRefs - This node does not exist  and there exists 1 leaf   in the subtree
//   KnownRefs - This node does not exist  and there exists 1 leaf   in the subtree
// UnknownNode - This node          exists and there exists 1 or more leaves in the subtree
//   KnownNode - This node          exists and there exists 1 or more leaves in the subtree
mtype:Secret = { Void, UnknownRefs, KnownRefs, UnknownNode, KnownNode };

typedef TreeKeys   { mtype:Secret node[ TREE ]  };

TreeKeys attackerKnowledge[T];

/****
  *
  * Left-balanced Binary Tree:
  *
  *            +-----(14)-----+
  *           /                \
  *         (12)              (13)
  *        /    \            /    \
  *     (8)     (9)       (10)     (11)
  *    /   \   /   \     /    \   /    \
  *   0     1 2     3   4      5 6      7 
  *
  * Binary Heap Layout:
  *
  * Index:   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14
  * Array: [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ]
  * Node:   14  12  13   8   9  10  11   0   1   2   3   4   5   6   7
  *
****/


/****
  *
  * Global (local) variable for inline functions.
  *
****/

local byte i = 0
local byte j = 0;
local byte k = 0;
local byte t = 0;
local byte absentees = 0;
local byte attendees = N;
local byte unsafeIDs = 0;


bool finishedLoop = false;

/********
    *
    * Global state priniting utilities:
    *
    *   - print_challenges
    *   - print_leadership
    *   - print_membership
    *
********/


inline print_challenges()
{
    d_step {
        printf("\n\tChallenges:");
        for ( i : 0 .. T - 1)
        {
            if
            :: challenge[i] -> printf("\n\t    [\tTrue\t]");
            :: else     -> printf("\n\t    [\tFalse\t]");
            fi
        }
        printf("\n");
    }
}


/*
inline print_leadership()
{
    d_step {
        printf("\n\tLeadership:");
        for ( i : 0 .. T - 1)
        {
            if
            :: leadership[i] == NONE -> printf("\n\t    [\tNONE\t]")
            :: else            -> printf("\n\t    [\t%d\t]", leadership[i])
            fi
        }
        printf("\n");
    }
}
*/


inline print_membership()
{
    d_step {
        printf("\n\tMembership:");
        for( i : 0 .. N - 1 )
        {
            if
            :: membership[i] -> printf("\n\t    [\tTrue\t]");
            :: else          -> printf("\n\t    [\tFalse\t]");
            fi
        };
        printf("\n");
    }
}


/*
inline print_epochQuerried()
{
    d_step {
        printf("\n\tEpochQuerried");
        for( i : 0 .. N - 1 )
        {
            if
            :: epochQuerried[i] -> printf("\n\t    [\tTrue\t]");
            :: else          -> printf("\n\t    [\tFalse\t]");
            fi
        };
        printf("\n");
    }
}
*/


inline print_user_epochs()
{
    d_step {
        printf("\n\tEpoch observing:");
        for ( i : 0 .. N - 1)
        {
            if
            :: epoch[i] == NONE -> printf("\n\t    [\tNONE\t]")
            :: else          -> printf("\n\t    [\t%d\t]", epoch[i])
            fi
        }
        printf("\n");
    }
}


inline print_user_hoarding()
{
    d_step {
        printf("\n\tHoarding since:");
        for ( i : 0 .. N - 1)
        {
            if
            :: hoarding[i] == NONE -> printf("\n\t    [\tNONE\t]")
            :: else                -> printf("\n\t    [\t%d\t]", hoarding[i])
            fi
        }
        printf("\n");
    }
}


inline print_user_unsafe()
{
    d_step {
        printf("\n\tRequired healing:");
        for ( i : 0 .. N - 1)
        {
            if
            :: unsafe[i] -> printf("\n\t    [\tTrue\t]");
            :: else      -> printf("\n\t    [\tFalse\t]");
            fi
        }
        printf("\n");
    }
}


/*
inline print_user_messages()
{
    d_step {
        printf("\n\tMessages available:");
        for ( i : 0 .. N - 1)
        {
            if
            :: nempty( M[i] ) -> printf("\n\t    [\tTrue\t]");
            ::  empty( M[i] ) -> printf("\n\t    [\tFalse\t]");
            fi
        }
        printf("\n");
    }
}
*/


inline print_attacker_knowledge()
{
    d_step
    {
        printf("\n\tAttacker Knowledge:");
        for( i : 0 .. T - 1 )
        {
            printf("\n>>> %d vvv", t);
            for( j : 0 .. TREE - 1 )
            {
                if
                :: attackerKnowledge[i].node[j] == UnknownRefs -> printf("\n\t%d [ x ]", j)
                :: attackerKnowledge[i].node[j] == UnknownNode -> printf("\n\t%d [ X ]", j)
                :: attackerKnowledge[i].node[j] ==   KnownRefs -> printf("\n\t%d [ o ]", j)
                :: attackerKnowledge[i].node[j] ==   KnownNode -> printf("\n\t%d [ O ]", j)
                :: attackerKnowledge[i].node[j] ==        Void -> printf("\n\t%d [   ]", j)
                :: else                                        -> printf("\n\t%d [ ? ]", j)
                fi
            }
        };
        printf("\n");
    }
}


inline print_global_state()
{
    d_step
    {
        printf("\n-=-=-=-=-=-=-=-=-=-=-=-\n-=-  GLOBAL  STATE  -=-\n-=-=-=-=-=-=-=-=-=-=-=-\n");
        print_challenges()
//        print_leadership()
        print_membership()
//        print_epochQuerried()
//        print_user_epochs()
        print_user_hoarding()
//        print_user_messages()
        print_user_unsafe()
        print_attacker_knowledge()
    }
}

/********
    *
    * Inline utilities:
    *
    *   - Select Attendee
    *   - Select Absentee
    *   - Select byte
    *
********/


/****
  * External result variable(s):
  *   - groupFull
****/
inline group_full( input )
{   d_step {

    take_attendance( input )
    groupFull = absentees == 0;

}   }


/****
  * External result variable(s):
  *   - groupDyad
****/
inline group_dyad( input )
{   d_step {

    take_attendance( input )
    groupDyad = attendees == 2;

}   }


/****
  * External result variable(s):
  *   - unsafeIDs
****/
inline safety_poll()
{
    d_step {
        byte recoveriesRequired = 0;
        for ( i : 0 .. N - 1 ) {
            if
            :: unsafe[i] -> recoveriesRequired++;
            :: else
            fi
        }
        unsafeIDs = recoveriesRequired;
    }
}


/****
  * External result variable(s):
  *   - absentees
  *   - attendees
****/
inline take_attendance( t )
{
    d_step {
        byte included = 0;
        for ( i : 0 .. N - 1 ) {
             if
             :: membership[i] -> included++
             :: else
             fi
        }
        attendees = included;
        absentees = N - attendees;
    }
}


/****
  * External result variable(s):
  *   - selectedID
****/
inline select_absentee( t )
{   atomic {

    byte sample;
    byte selection = NONE;

    take_attendance( t );
    select( sample : 0 .. absentees - 1 );

/*
    printf("\nSELECTING ABSENTEE:\n");
    printf("  attendees           = %d\n", attendees);
    printf("  absentees           = %d\n", absentees);
    printf("  sample              = %d\n", sample);
*/

    for ( i : 0 .. N - 1 ) {
//        printf("  i = %d v = %d s = %d g = %d\n", i, selection, sample, selection == NONE && membership[i]);
        if
        :: selection == NONE && !membership[i] && sample != 0 -> sample--
        :: selection == NONE && !membership[i] && sample == 0 -> selection = i
        :: else
        fi
    }

    selectedID = selection;
//    printf("  selection           = %d\n", selectedID);

}   }


/****
  * External result variable(s):
  *   - senderID
****/
inline select_sender( commitment )
{
    byte selectedID;
    select_sender_constrained( NONE, false, commitment );
    senderID = selectedID;
}


/****
  * External result variable(s):
  *   - exiledID
****/
inline select_exiled( forced, commitment )
{
    byte selectedID;
    select_sender_constrained( NONE, forced, commitment );
    exiledID = selectedID;
}


/****
  * External result variable(s):
  *   - banisherID
****/
inline select_banisher( banned, commitment )
{
    byte selectedID;
    select_sender_constrained( banned, false, commitment );
    banisherID = selectedID;
}


/****
  * External result variable(s):
  *   - updaterID
****/
inline select_updater( forced, commitment )
{
    byte selectedID;
    select_sender_constrained( NONE, forced, commitment );
    updaterID = selectedID;
}



/****
  * External result variable(s):
  *   - selectedID
****/
inline select_sender_constrained ( banned, forced, commitment )
{   atomic {
//    printf("\nSELECTING Sender %d %d %d", banned, forced, commitment);
    byte candidates = 0;
    d_step {
        for ( i : 0 .. N - 1 ) {
/*
             d_step
             {
                 printf("\n  membership[%d]     = %d", i, membership[i]);
                 printf("\n  i != banned        = %d", i != banned  );
                 printf("\n  !forced            = %d", !(forced)    );
                 printf("\n  commitment         = %d",  commitment);
                 printf("\n  !epochQuerried[%d] = %d", i, !(epochQuerried[i]));
                 printf("\n  unsafe[%d]         = %d", i, unsafe[i]);
                 printf("\n");
                 printf("\n  commitment || !(epochQuerried[%d]) = %d", i, (commitment || !(epochQuerried[i])));
                 printf("\n  (!(forced) && (commitment || !(epochQuerried[%d]))) = %d", i, !(forced) && (commitment || !(epochQuerried[i])));
                 printf("\n  (!(forced) && (commitment || !(epochQuerried[%d]))) || unsafe[%d] = %d", i, i, (!(forced) && (commitment || !(epochQuerried[i]))) || unsafe[i]);
                 printf("\n")
             }
*/
             bool senderCandidate;
             sender_candidate( banned, forced, commitment, i );
             if
             :: senderCandidate -> candidates++
             :: else
             fi
        }
    }

    if
    :: candidates == 0 -> selectedID = NONE
    :: else ->
        byte sample;
        select( sample : 0 .. candidates - 1 );
        byte selection = NONE;
        d_step
        {
    /**/
            printf("\n  candidates         = %d", candidates);
            printf("\n  sample             = %d", sample);
    /**/
    
            for ( i : 0 .. N - 1 ) {
//                printf("\n\ti = %d v = %d s = %d b = %d", i, selection, sample, membership[i] && i != banned && ((!(forced) && (commitment || !(false))) || unsafe[i]));
                if
                :: selection == NONE ->
                    bool senderCandidate;
                    sender_candidate( banned, forced, commitment, i );
                    if
                    :: senderCandidate ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    :: else
                    fi
                :: else
                fi
            }
        }
        selectedID = selection;
    fi
}   }


/****
  * External result variable(s):
  *   - senderCandidate
****/
inline sender_candidate( banned, forced, commitment, i )
{
    bool isAnOption = membership[i] && (i != banned);
//    bool querryOkay = commitment || !(epochQuerried[i]);
    bool querryOkay = commitment || !(false);
    bool forcesSafe = (!(forced) && commitment) || unsafe[i];
    senderCandidate = isAnOption && forcesSafe
}


/****
  * External result variable(s):
  *   - joinerID
****/
inline select_joiner( input )
{
    d_step
    {
        byte selectedID;
        select_absentee( input );
        joinerID = selectedID;
    }
}


/****
  * External result variable(s):
  *   - corruptedID
****/
inline select_corrupted( t )
{   atomic {

    byte candidateCorruptibles;
    candidates_for_corruption( t );
    if
    :: candidateCorruptibles == 0 -> corruptedID = NONE
    :: else ->
        byte sample;
        select ( sample : 0 .. candidateCorruptibles - 1 );
        byte selection = NONE;
        d_step
        {
            for ( i : 0 .. N )
            {
                if
                :: selection == NONE ->
                    bool candidateCorruption;
                    candidate_corruption( i );
                    if
                    :: candidateCorruption ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    :: else
                    fi
                :: else
                fi
            }
        }
        corruptedID = selection
    fi
}   }


inline candidates_for_corruption( t )
{
    safety_poll();
    byte remainingEpochs = T - t - 1

    if
    :: unsafeIDs >= T - t - 1 -> candidateCorruptibles = 0;
    :: else ->
        byte candidates = 0;
        d_step
        {
            for ( i : 0 .. N - 1 )
            {
                bool candidateCorruption;
                candidate_corruption( i );
                if
                :: candidateCorruption -> candidates++
                :: else
                fi
            }
        }
        candidateCorruptibles = candidates
    fi
}


/****
  * External result variable(s):
  *   - candidateCorruption
****/
inline candidate_corruption( i )
{
    // The corrupted user must not previously been instructed to hoard!
    // Violates the "Safety Predicate SAFE" described in Alwen 2020.
    candidateCorruption = hoarding[i] == NONE && membership[i] && attackerKnowledge[t].node[NODE+i] == UnknownNode
}


/****
  * External result variable(s):
  *   - currentEpoch
****/
/*
inline current_epoch()
{   d_step {

    byte x = 0;
    for ( i : 0 .. T - 1 )
    {
        if
        :: leadership[i] != NONE -> x++
        :: else
        fi
    }
    currentEpoch = t;

}   }
*/


/****
  * External result variable(s):
  *   - selectedEpoch
****/
inline select_epoch( input )
{   atomic {

    byte anyEpoch;
    select ( anyEpoch : 0 .. input );
    selectedEpoch = anyEpoch;

}   }


/****
  * External result variable(s):
  *   - hoarderID
****/
inline select_hoarder()
{   atomic {

    byte candidateHoarders;
    candidates_for_hoarding();

    if
    :: candidateHoarders == 0 -> hoarderID = NONE
    :: else ->
        byte sample;
        select ( sample : 0 .. candidateHoarders - 1 );
        byte selection = NONE;
        d_step
        {
            for ( i : 0 .. N - 1 )
            {
                if
                :: selection != NONE -> skip
                :: else ->
                    bool candidateHoarder
                    candidate_hoarder( i );
                    if
                    :: !(candidateHoarder) -> skip
                    :: else ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    fi
                fi
            }
        }
        hoarderID = selection
    fi
}   }


inline candidates_for_hoarding()
{
    byte candidates = 0;
    for ( i : 0 .. N - 1 )
    {
        bool candidateHoarder
        candidate_hoarder( i );
        if
        :: candidateHoarder -> candidates++
        :: else
        fi
    }
    candidateHoarders = candidates
}


/****
  * External result variable(s):
  *   - candidateHoarder
****/
inline candidate_hoarder( i )
{
    candidateHoarder = hoarding[i] == NONE && membership[i]
}


/****
  * External result variable(s):
  *   - messagePending
  *   - messageVacancy
****/
/*
inline message_status()
{   d_step {

//    printf("\nCHECKING AVAILABLE MESSAGES:\n");
    byte pending = false;
    bool vacancy = true;
    for ( i : 0 .. N - 1 )
    {
        pending = pending || nempty( M[i] );
        vacancy = vacancy &&  nfull( M[i] );
    }
    messagePending = pending;
    messageVacancy = vacancy;
}   }
*/


/****
  * External result variable(s):
  *   - recipientID
****/
/*
inline select_recipient()
{   atomic {

//    printf("\nSELECT RECIPIENT:\n");

    byte availableRecipient = 0;
    for ( i : 0 .. N - 1 )
    {
        if
        :: nempty(M[i]) -> availableRecipient++
        ::  empty(M[i]) -> skip
        fi
    }

//    printf("\nAvailable Recipients: %d\n", availableRecipient);

    byte sample;
    select( sample : 0 .. availableRecipient - 1 )

//    printf("\nSample: %d\n", sample);

    byte selection = NONE;
    bool content;
    for ( i : 0 .. N - 1 )
    {
        content =  nempty(M[i]);
//        printf("\n  i: %d  v: %d  s: %d  q: %d\n", i, selection, sample, content);
        if
        :: selection == NONE && nempty( M[i] ) && sample == 0 -> selection = i
        :: selection == NONE && nempty( M[i] ) && sample != 0 -> sample--
        :: selection == NONE &&  empty( M[i] ) && sample == 0 -> skip
        :: selection != NONE -> skip
        fi
    }
    
//    printf("\nRecipient: %d\n", selection);
    recipientID = selection;

}   }
*/


/****
  * External result variable(s):
  *   - forcedPlay
****/
inline forced_play( t ) {
    d_step {
        byte remainingEpochs = T - t - 1;
        safety_poll();
        assert( T - t - 1 >= unsafeIDs );
        forcedPlay = unsafeIDs > 0 && unsafeIDs == remainingEpochs;
    }
}


/****
  * External result variable(s):
  *   - commitEpochAdvance
****/
inline decide_commitment()
{
    do
    :: commitEpochAdvance = true;  break
    :: commitEpochAdvance = false; break
    od
}


/****
  *
  * The following methods:
  *   - broadcast
  *   - propogate
  *
  * Are used by the security game moves:
  *   - insert_member
  *   - remove_member
  *   - oblige_update
  *
****/


inline broadcast ( t, sender, subject, commitment, message )
{
    atomic
    {
        // Attacker observes network messages
        attacker_observes_message( t, sender, i, commitment, message );
/*        
        for ( i : 0 .. N - 1 ) {
            bool messageSentADD = message == RMV && (membership[i] || i == subject)
            bool messageSentRMV = message == ADD &&  membership[i] && i != subject
            bool messageSentUPD = message == UPD &&  membership[i]
            if
            :: messageSentADD ||
               messageSentRMV ||
               messageSentUPD ->
//                printf("\n OBSERVING: %d -> %d : %e @ %d", sender, i, message, subject)
            :: else
            fi
        };
*/
    }
}


inline propogate ( t, sender, insert, remove )
{
    d_step {
/*
        for ( i : 0 .. N - 1 )
        {
            epochQuerried[i] = false
        }
*/
        if
        :: insert != NONE -> membership[insert] = true
        :: remove != NONE -> membership[remove] = false
        :: else
        fi
    }
}


/****
  *
  * The following methods:
  *   - attacker_initializes_knowledge
  *   - attacker_observes_message
  *
  * Are used by the security game moves:
  *   - broadcast
  *   - CGKA_initialize
  *
****/


inline attacker_initializes_knowledge()
{
    d_step
    {
        for( i : 0 .. T - 1 )
        {
            for( j : 0 .. TREE - 1 )
            {
                attackerKnowledge[i].node[j] = Void
            }
        }
    }
}


inline attacker_observes_message( t, sender, subject, commitment, message )
{
    if
    :: !commitment -> skip
    :: else ->
        // If the attacker has know knowledge of the epoch,
        // meaning that all cell values are "Void,"
        // then it is the first time we have entered the epoch
        // and the cell values should be initialized as either:
        //   * UnknownNode
        //   * UnknownRefs
        //   *        Void
        bool noEpochKnowledge;
        attacker_has_no_epoch_knowledge( t );
        if
        :: noEpochKnowledge -> attacker_init_epoch_knowledge( t );
        :: else
        fi
        
        //   referenceEpoch = (t == 0) ? t : t - 1;
        byte referenceEpoch = t ;
        if
        :: t != 0 -> referenceEpoch--;
        :: else
        fi

        attacker_copy_epoch_knowledge( referenceEpoch );
        attacker_wipe_sender_knowledge( sender, t );
        attacker_updates_knowledge ( t );
    fi
}


inline attacker_has_no_epoch_knowledge ( e )
{
    d_step
    {
        bool allVoid = true;
        for ( i : 0 .. TREE - 1 )
        {
            allVoid = allVoid && (attackerKnowledge[e].node[i] == Void)
        }
        noEpochKnowledge = allVoid;
    }
}


inline attacker_init_epoch_knowledge( e )
{   atomic {

    bool leaves = true;
    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                // Leaf node case(s)
                if
                :: leaves ->
                    if
                    // No knowledge from excluded group members
                    :: !membership[i] -> attackerKnowledge[e].node[j] = Void
                    :: else           -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                // Internal node case(s)
                :: else ->
                    byte childL = j * 2 + 1;
                    byte childR = j * 2 + 2;
                    // Check current epoch for existance of subtrees
                    bool existanceOfSubtree;
                    existance_of_subtree( e, childL);
                    bool voidL = !existanceOfSubtree;
                    existance_of_subtree( e, childR);
                    bool voidR = !existanceOfSubtree;
                    if
                    ::  voidL &&  voidR -> attackerKnowledge[e].node[j] =        Void
                    :: !voidL &&  voidR -> attackerKnowledge[e].node[j] = UnknownRefs
                    ::  voidL && !voidR -> attackerKnowledge[e].node[j] = UnknownRefs
                    :: !voidL && !voidR -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                fi
            };
            offset = offset / 2;
            leaves = false;
        }
    od
}   }


inline attacker_copy_epoch_knowledge( e )
{   atomic {

    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                bool knowledgeOfSubtree;
                knowledge_of_subtree( e, j);
                if
                ::  attackerKnowledge[e+1].node[j] == UnknownNode && knowledgeOfSubtree ->
                    attackerKnowledge[e+1].node[j] = KnownNode
                ::  attackerKnowledge[e+1].node[j] == UnknownRefs && knowledgeOfSubtree ->
                    attackerKnowledge[e+1].node[j] = KnownRefs
                :: else
                fi
            };
            offset = offset / 2;
        }
    od
}   }


inline attacker_wipe_sender_knowledge( sender, e )
{   atomic {

    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            j = offset + sender;
            if
            ::  attackerKnowledge[e].node[j] == UnknownNode ||
                attackerKnowledge[e].node[j] ==   KnownNode ->
                attackerKnowledge[e].node[j] =  UnknownNode
            ::  attackerKnowledge[e].node[j] == UnknownRefs ||
                attackerKnowledge[e].node[j] ==   KnownRefs ->
                attackerKnowledge[e].node[j] =  UnknownRefs
            :: else
            fi
            offset = offset / 2;
        }
    od
}   }


inline attacker_updates_knowledge( e )
{   atomic {

    bool leaves = true;
    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                if
                :: leaves -> skip
                :: else ->
                    byte childL = j * 2 + 1;
                    byte childR = j * 2 + 2;
                    // Check current epoch for existance of subtrees
                    bool existanceOfSubtree;
                    existance_of_subtree( e, childL);
                    bool voidL = !existanceOfSubtree;
                    existance_of_subtree( e, childR);
                    bool voidR = !existanceOfSubtree;
                    // Check previous epoch for knowledge of subtrees
                    bool knowledgeOfSubtree;
                    knowledge_of_subtree( e, childL);
                    bool knowsL = knowledgeOfSubtree;
                    knowledge_of_subtree( e, childR);
                    bool knowsR = knowledgeOfSubtree;
                    
                    if
                    ::  voidL &&  voidR                       -> attackerKnowledge[e].node[j] =        Void
                    :: !voidL &&  voidR &&             knowsR -> attackerKnowledge[e].node[j] =   KnownRefs
                    :: !voidL &&  voidR &&            !knowsR -> attackerKnowledge[e].node[j] = UnknownRefs
                    ::  voidL && !voidR &&  knowsL            -> attackerKnowledge[e].node[j] =   KnownRefs
                    ::  voidL && !voidR && !knowsL            -> attackerKnowledge[e].node[j] = UnknownRefs
                    :: !voidL && !voidR &&  knowsL &&  knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR && !knowsL &&  knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR &&  knowsL && !knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR && !knowsL && !knowsR -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                fi
            };
            offset = offset / 2;
            leaves = false;
        }
    od
    }
}


inline existance_of_subtree( i, j )
{
    existanceOfSubtree = attackerKnowledge[i].node[j] != Void
}


inline knowledge_of_subtree( i, j )
{
    knowledgeOfSubtree = attackerKnowledge[i].node[j] == KnownNode || attackerKnowledge[i].node[j] == KnownRefs
}


/********
    *
    * Oracles available to the attacker:
    *
    *   - Corrupt
    *   - Hoard
    *   - Reveal
    *
********/


inline corrupt( t, memberID )
{   atomic {

    // Learn the secret material of the user in their current epoch
    byte upperBound = t;
    byte lowerBound = upperBound;

    // Learn any additional secrets they have hoarded!
    byte epochSavedFrom = hoarding[memberID];
    if
    :: epochSavedFrom < upperBound -> lowerBound = epochSavedFrom
    :: else
    fi

    printf("Corrupting from: %d -- %d\n", lowerBound, upperBound);


    // For each epoch which the member has secrets
    // (this implies that the user was a member)
    // Then the attacker learns the secrets on the direct path
    // between the member and the root node on the LBBT.
    byte peek;
    for ( peek : lowerBound .. upperBound )
    {
        printf("Corrupting %d\n", peek);
        if
        :: !membership[memberID] -> skip
        :: else ->
            printf("Passed membership guard!\n");
            byte off   = NODE;
            byte level = TREE + 1;
            do
            :: level == 0 -> break
            :: level != 0 -> d_step
                {
                    level = level / 2;
                    k = off+memberID;
                    printf("tree level: %d @ %d\n", level, j);
                    if
                    :: attackerKnowledge[peek].node[k] == UnknownNode -> attackerKnowledge[peek].node[k] = KnownNode
                    :: attackerKnowledge[peek].node[k] == UnknownRefs -> attackerKnowledge[peek].node[k] = KnownRefs
                    :: else
                    fi
                    off = off / 2;
                }
                printf("Check Index Post: %d\n", peek);
                if
                :: i == upperBound ->
                    printf("UPPER BOUNDed %d\n", peek);
                    attacker_updates_knowledge( peek );
                :: else ->
                    printf("Lower Pre %d\n", peek);
                    attacker_copy_epoch_knowledge( peek  );
                    printf("Lower Post %d\n", peek);
                    attacker_updates_knowledge(   peek+1 );
                fi
                printf("Before hand off: %d\n", peek);
            od
        fi
    }

    unsafe[memberID] = true;
}   }


inline hoard( t, memberID )
{
    hoarding[memberID] = t
}


inline reveal( t )
{
    d_step {
        challenge[t] = true;
        attackerKnowledge[t].node[ROOT] -> KnownNode;
    }
}


/********
    *
    * Oracles available to the Group Members:
    *
    *   - Insert Member ( ADD )
    *   - Remove Member ( RMV )
    *   - Oblige Update ( UPD )
    *   - Convey Update ( DLV )
    *
********/


// Precondition: joiner is not in the group!
inline insert_member( t, sender, joiner, commitment )
{
    d_step {
//        printf("\nINSERT MEMBER:\n  Inviter: %d\n  joiner: %d\n  Epoch: \t%d\n", sender, joiner, t)
        assert(sender < N);
        assert(joiner < N);
    }
    if
    :: !commitment -> skip // epochQuerried[sender] = true;
    ::  commitment -> propogate ( t, sender, joiner, NONE );
    fi
    broadcast( t, sender, joiner, commitment, ADD );
}


// Precondition: exiledMemeber is in the group!
inline remove_member( t, sender, exiled, commitment )
{
    d_step {
//        printf("\nREMOVE MEMBER:\n  Sender: \t%d\n  Exiled: \t%d\n  Epoch: \t%d\n", sender, exiled, t);
        assert(sender < N);
        assert(exiled < N);
    }
    if
    :: !commitment -> skip // epochQuerried[sender] = true;
    ::  commitment -> propogate ( t, sender, NONE, exiled); unsafe[exiled] = false;
    fi
    broadcast( t, sender, exiled, commitment, RMV );
}


inline oblige_update( t, sender, commitment )
{
    d_step {
//        printf("\nOBLIGE UPDATE:\n  Sender: \t%d\n  Epoch: \t%d\n", sender, t);
        assert(sender < N);
    }
    if
    :: !commitment -> skip // epochQuerried[sender] = true;
    ::  commitment -> propogate ( t, sender, NONE, NONE ); unsafe[sender] = false;
    fi
    broadcast( t, sender, NONE, commitment, UPD );
}


/*
inline convey_update( t, receiver )
{
    d_step {
//        printf("\nUPDATE MESSAGE:\n  Target\t %d\n  Epoch \t %d\n  Sender\t %d\n", receiver, e, sender);
        if
        :: leadership[t] == NONE ->
            leadership[t] = sender;
            printf("SET leadership[%d] <- %d\n", t, sender);
        :: else
        fi
    }
}
*/


/********
    *
    * Initialization inline routines, in order of execution:
    *
    *   - Initialize
    *   - Select Group
    *   - Create Group
    *   - CGKA Security Game
    *
********/


inline CGKA_initialize()
{   atomic {
    printf("\n***********************\n* CGKA: Initialize!   *\n***********************\n");

    d_step
    {
        for( i : 0 .. N - 1 )
        {
//            epoch[i] = 0;
            hoarding[i]  = NONE;
        };
    
        for( i : 0 .. T - 1 )
        {
            challenge[i] = false;
//            leadership[i]  = NONE;
        };
/*
        for ( i : 0 .. N - 1 )
        {
            epochQuerried[i] = false;
        }
*/
    };

    attacker_initializes_knowledge()

}   }


inline CGKA_create_group()
{   atomic {
    printf("\n***********************\n* CGKA: Create Group! *\n***********************\n");

    byte id0, n, t;
    
    // Set the "lead" byte to be the first member in the group.
    d_step
    {
        id0 = 0;
        t   = 0;
    }

    // Number of members to add
    select ( n : 2 .. N );
    for( i : 0 .. N - 1 )
    {
        membership[i] = i < n;
    };

    print_membership();
    
    broadcast ( t, id0, NONE, true, UPD );

/*
    for( i : 0 .. N - 1 )
    {
        if
        :: membership[i] -> convey_update( t, i )
        :: else
        fi
    };
*/

}   }



inline CGKA_security_game()
{
    printf("\n***********************\n* CGKA: Begin Play!   *\n***********************\n");
    
    // Loop through all epochs...
    // EXCEPT the final epoch!
    for ( t : 0 .. T - 2)
    {
        bool commitmentRequired = false;

        // The first, the attacker must decide whether or not to:
        //   1. Play a move which will *commit* the group members to advance to the next epoch
        //   2. Play a move which where the group members remain in the current epoch
        //
        // We call selction option (1) "commitment" and option (2) "non-committal."
        do
        // NOTE: The attacker can always play a move which commits to a new epoch
        :: play_move_with_commitment( t ); break
        
        // NOTE: Alternatively, the attacker can play a non-committal move and remain in the same epoch
        :: !commitmentRequired -> atomic
            {
               play_noncommittal_move( t );
               check_commitment_required( t );
               printf("POST-noncommittal");
            };
        od;
        printf("LOOP broken: %d", t);

        d_step
        {
            // After the operation is complete, check to see if the an endgame condition has been reached.
            safety_poll();
            printf ("\n< < <\n< Moves:   %d\n< Unsafe:  %d\n< < < \n", T - t - 1, unsafeIDs);
        }
    }
    loopFinal: skip
    finishedLoop = true;

    safety_poll();
    bool endGame = unsafeIDs == 0;

/*
    // During the last epoch the attacker can only play a non-committal move
    do
    :: endGame -> break
    :: atomic
        {
           play_noncommittal_move( t );
           d_step
           {
               // After the operation is complete, check to see if the an endgame condition has been reached.
               safety_poll();
               endGame = unsafeIDs == 0;
               printf ("\n< < <\n< Moves:   %d\n< Unsafe:  %d\n< Endgame: %d\n< < < \n", T - t - 1, unsafeIDs, endGame);
           }
        };
    od;
*/
}

inline can_reveal( t )
{
    canReveal = !challenge[t] && (t != T - 1) && attackerKnowledge[t].node[ROOT] == UnknownNode;
    if
    :: !canReveal -> skip
    :: else ->
        byte challengesUsed = 0;
        d_step
        {
            for ( i : 0 .. t )
            {
                if
                :: challenge[i] -> challengesUsed++;
                :: else
                fi
            }
        };
        canReveal = challengesUsed < C
    fi
}


inline can_query()
{
    canQuery = false
// TODO: restore the more lenient definition
/*
    byte querriesUsed = 0;
    byte groupSize    = 0;
    d_step
    {
        for ( i : 0 .. N - 1 )
        {
            if
            :: epochQuerried[i] -> querriesUsed++
            :: else
            fi;
            
            if
            :: membership[i] -> groupSize++
            :: else
            fi
        }
    };
    
    printf("\n\tquerriesUsed < groupSize - 1\n\t%d < %d - 1 = %d", querriesUsed, groupSize, querriesUsed < groupSize - 1);

    // Cannot send a final test mail when there is only one untested member remaining.
    // The last member will be the commitment member.
    canQuery = querriesUsed < groupSize - 1;
*/
}


inline check_commitment_required( t )
{
    bool canQuery;
    can_query();
    printf("\n canQuery = %d", canQuery);

    bool canReveal;
    can_reveal( t );
    printf("\n canReveal = %d", canReveal);

    bool canHoardMember = false;
    d_step
    {
        byte candidateHoarders;
        candidates_for_hoarding();
        canHoardMember = candidateHoarders > 0;
        printf("\n canHoardMember = %d", canHoardMember);
    }

    bool canCorruptMember = false;
    d_step
    {
        byte candidateCorruptibles;
        candidates_for_corruption( t );
        canCorruptMember = candidateCorruptibles > 0;
        printf("\n canCorruptMember = %d", canCorruptMember);
    }

    commitmentRequired = !canQuery && !canReveal && !canHoardMember && !canCorruptMember
}


inline play_noncommittal_move( t )
{
    bool canQuery, canReveal, forcedPlay, groupDyad, groupFull;
    byte corruptedID, exiledID, banisherID, hoarderID, updaterID;

    assign_move_variables( t, false );
    printf("\nNON-Committal!");

    do
    // Non-committing moves
    :: canQuery -> play_move_maybe_commitment( t, false ); break

    //  Reveal
    :: canReveal -> atomic
        {   printf("\n> > >\n> CGKA: Game Move = reveal %d\n> > >\n", t);
            reveal( t )
        }; break

    //  Corrupt
    :: corruptedID != NONE && !forcedPlay -> atomic
        {   printf("\n> > >\n> CGKA: Game Move = corrupt %d\n> > >\n", corruptedID);
            corrupt( t, corruptedID )
        }; break

    //  Hoard
    :: hoarderID != NONE -> atomic
        {   printf("\n> > >\n> CGKA: Game Move = hoard %d\n> > >\n", hoarderID);
            hoard( t, hoarderID )
        }; break

/*
    //  Convey
    :: messagePending -> atomic
        {
            byte recipientID;
            select_recipient();
            printf("\n> > >\n> CGKA: Game Move = convey_update %d\n> > >\n", recipientID);
            convey_update ( recipientID );
        }; break
*/        
    od
}


inline play_move_with_commitment( t )
{
    bool canQuery, canReveal, forcedPlay, groupDyad, groupFull;
    byte corruptedID, exiledID, banisherID, hoarderID, updaterID;
    
    assign_move_variables( t, true );
    printf("\nCOMMITTING!");
    play_move_maybe_commitment( t, true )
}


inline assign_move_variables( t, commitment )
{
    atomic
    {
        can_query();
        can_reveal(  t );
        forced_play( t );
        group_dyad(  t );
        group_full(  t );
        select_corrupted( t );
        select_hoarder();
        select_updater(  forcedPlay && commitment, commitment );
        select_exiled(   forcedPlay && commitment, commitment );
        select_banisher( exiledID                , commitment );
    };
    printf("\nEpoch (t) = %d", t);
    print_global_state()

    d_step
    {
        printf("\n\tcanQuery    \t%d",    canQuery );
        printf("\n\tforcedPlay  \t%d",  forcedPlay );
        printf("\n\tgroupDyad   \t%d",   groupDyad );
        printf("\n\tgroupFull   \t%d",   groupFull );
        printf("\n\tcorruptedID \t%d", corruptedID );
        printf("\n\texiledID    \t%d",    exiledID );
        printf("\n\tbanisherID  \t%d",  banisherID );
        printf("\n\thoarderID   \t%d",   hoarderID );
        printf("\n\tupdaterID   \t%d",   updaterID );
    }
}


inline play_move_maybe_commitment( t, commitment )
{
    do
    // Update
    :: updaterID != NONE -> atomic
        {   printf("\n> > >\n> CGKA: Game Move = oblige_update %d (committed? %d)\n> > >\n", updaterID, commitment);
            oblige_update( t, updaterID, commitment );
        }; break

    // Remove
    :: !groupDyad && exiledID != NONE && banisherID != NONE -> atomic
        {  printf("\n> > >\n> CGKA: Game Move = remove_member %d %d (committed? %d)\n> > >\n", banisherID, exiledID, commitment);
            remove_member( t, banisherID, exiledID, commitment );
        }; break

    // Insert
    :: !groupFull && !forcedPlay -> atomic
        {
            byte joinerID, senderID;
            select_sender( commitment );
            select_joiner( t );
            printf("\n> > >\n> CGKA: Game Move = insert_member %d %d (committed? %d)\n> > >\n", senderID, joinerID, commitment);
            insert_member( t, senderID, joinerID, commitment );
        }; break
    od
}


init
{
    CGKA_initialize();
    CGKA_create_group();
    CGKA_security_game();
}

//ltl finished_loop { <>finishedLoop }
ltl attendees_more_than_one { [](attendees > 1) }
//ltl attendees_absentees_sum { [](attendees + absentees == N) }
