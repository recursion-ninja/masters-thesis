/********
    *
    * Advantage:
    *
    * In the following, a (`t`, `c`, `n`)-attacker is an attacker `A` that runs in time at most `t`,
    * makes at most `c` challenge queries, and never produces a group with more than `n` members.
    * The attacker wins the CGKA security game if they correctly guesses the random bit `b` in
    * the end and the safety predicate `P` evaluates to true on the queries made by the attacker.
    *
    * Hence we define our (`t`, `c` `n`) constants below:
    *
********/

// A constant for missing data
#define NONE 255

/****
  *
  * Security game's parameters' valid ranges:
  *   - T <- [3, 255]
  *   - C <- [1,   T]
  *   - N <- [3, 127]
  *
  * Lookup table for TREE value derived from N:
  *   - [ 1,   1] ->   1
  *   - [ 2,   2] ->   3
  *   - [ 3,   4] ->   7
  *   - [ 5,   8] ->  15
  *   - [ 9,  16] ->  31
  *   - [17,  32] ->  63
  *   - [33,  64] -> 127
  *   - [65, 128] -> 255
  *
****/
#define T    3
#define C    3
#define N    4
#define TREE 7
#define NODE (TREE / 2)
#define ROOT 0
#define LAST_EPOCH (T - 1)
// Because the last challenge must be saved to end the game
#define MAX_REVEAL (C - 1)

/****
  *
  * Global state of the CGKA security game.
  *
****/

bool  challenge[T]; // Has the attacker challenged in an epoch?
bool membership[N]; // Group membership of current epoch
bool     unsafe[N]; // Members which require a change to update
byte   hoarding[N]; // Epoch from which the user saves secrets

bool concludedCGKA = false; // Does the CGKA
// Does a trivial attack exist?
// i.e, does the SAFE predicate hold?
bool triviality   = false; 


/****
  *
  * Global state of the attacker.
  *
****/

//        Void - This node does not exist  and there exists 0 leaves in the subtree
// UnknownRefs - This node does not exist  and there exists 1 leaf   in the subtree
//   KnownRefs - This node does not exist  and there exists 1 leaf   in the subtree
// UnknownNode - This node          exists and there exists 1 or more leaves in the subtree
//   KnownNode - This node          exists and there exists 1 or more leaves in the subtree
mtype:Secret = { Void, UnknownRefs, KnownRefs, UnknownNode, KnownNode };

// Required for a multidimensional array
typedef TreeKeys   { mtype:Secret node[ TREE ]  };
TreeKeys attackerKnowledge[T];

/****
  *
  * Left-balanced Binary Tree:
  *
  *            +-----(14)-----+
  *           /                \
  *         (12)              (13)
  *        /    \            /    \
  *     (8)     (9)       (10)     (11)
  *    /   \   /   \     /    \   /    \
  *   0     1 2     3   4      5 6      7 
  *
  * Binary Heap Layout:
  *
  * Index:   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14
  * Array: [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ]
  * Node:   14  12  13   8   9  10  11   0   1   2   3   4   5   6   7
  *
****/

bool attackerKnowsRootKey = false;


/****
  *
  * Global (local) variable for inline functions.
  *
****/

// Indexing variables
local byte i = 0;
local byte j = 0;
local byte k = 0;
local byte t = 0;

// Group Composition
local byte absentees = 0;
local byte attendees = N;
local bool groupDyad = false;
local bool groupFull = false;
local byte groupMost = 0; // The maximum member ID during any past/present epoch.

// Protocol State
local bool forcedPlay = false;
local bool revealRoot = C > 1;
local byte unsafeIDs  = 0;


/********
    *
    * Global state priniting utilities:
    *
    *   - print_attacker_knowledge
    *   - print_challenges
    *   - print_group_composition
    *   - print_membership
    *   - print_protocol_state
    *   - print_user_hoarding
    *   - print_user_unsafe
    *
********/


inline print_attacker_knowledge()
{
    d_step
    {
        printf("\n\tAttacker Knowledge:");
        for( i : 0 .. T - 1 )
        {
            printf("\n>>> %d vvv", t);
            for( j : 0 .. TREE - 1 )
            {
                if
                :: attackerKnowledge[i].node[j] == UnknownRefs -> printf("\n\t%d [ x ]", j)
                :: attackerKnowledge[i].node[j] == UnknownNode -> printf("\n\t%d [ X ]", j)
                :: attackerKnowledge[i].node[j] ==   KnownRefs -> printf("\n\t%d [ o ]", j)
                :: attackerKnowledge[i].node[j] ==   KnownNode -> printf("\n\t%d [ O ]", j)
                :: attackerKnowledge[i].node[j] ==        Void -> printf("\n\t%d [   ]", j)
                :: else                                        -> printf("\n\t%d [ ? ]", j)
                fi
            }
        };
        printf("\n");
    }
}


inline print_challenges()
{
    d_step {
        printf("\n\tChallenges:");
        for ( i : 0 .. T - 1)
        {
            if
            :: challenge[i] -> printf("\n\t    [\tTrue\t]");
            :: else     -> printf("\n\t    [\tFalse\t]");
            fi
        }
        printf("\n");
    }
}


inline print_group_composition()
{
    d_step
    {
        printf("\n\tattendees \t%d", attendees );
        printf("\n\tabsentees \t%d", absentees );
        printf("\n\tgroupDyad \t%d", groupDyad );
        printf("\n\tgroupFull \t%d", groupFull );
        printf("\n\tgroupMost \t%d", groupMost );
    }
}


inline print_membership()
{
    d_step {
        printf("\n\tMembership:");
        for( i : 0 .. N - 1 )
        {
            if
            :: membership[i] -> printf("\n\t    [\tTrue\t]");
            :: else          -> printf("\n\t    [\tFalse\t]");
            fi
        };
        printf("\n");
    }
}


inline print_protocol_state()
{
    d_step
    {
        printf("\n\trevealRoot \t%d", revealRoot );
        printf("\n\tforcedPlay \t%d", forcedPlay );
        printf("\n\tunsafeIDs  \t%d", unsafeIDs  );
    }
}


inline print_user_hoarding()
{
    d_step {
        printf("\n\tHoarding since:");
        for ( i : 0 .. N - 1)
        {
            if
            :: hoarding[i] == NONE -> printf("\n\t    [\tNONE\t]")
            :: else                -> printf("\n\t    [\t%d\t]", hoarding[i])
            fi
        }
        printf("\n");
    }
}


inline print_user_unsafe()
{
    d_step {
        printf("\n\tRequired healing:");
        for ( i : 0 .. N - 1)
        {
            if
            :: unsafe[i] -> printf("\n\t    [\tTrue\t]");
            :: else      -> printf("\n\t    [\tFalse\t]");
            fi
        }
        printf("\n");
    }
}


inline print_global_state()
{
    d_step
    {
        printf("\n-=-=-=-=-=-=-=-=-=-=-=-\n-=-  GLOBAL  STATE  -=-\n-=-=-=-=-=-=-=-=-=-=-=-\n");
        print_challenges();
        print_membership();
        print_user_hoarding();
        print_user_unsafe();
        print_group_composition();
        print_protocol_state();
        print_attacker_knowledge()
    }
}


/********
    *
    * Inline utilities for after move updates:
    *   - after_move_refresh
    *   - take_attendance
    *
********/


/****
  * External result variable(s):
  *   - commitmentRequired
  *   - forcedPlay
  *   - revealRoot
  *   - triviality
  *   - unsafeIDs
****/
inline after_move_refresh( t )
{
    d_step {
        // Refresh "unsafeIDs"
        byte remainingEpochs = LAST_EPOCH - t;
        byte recoveriesRequired = 0;
        for ( i : 0 .. N - 1 ) {
            if
            :: unsafe[i] -> recoveriesRequired++;
            :: else
            fi
        }
        unsafeIDs  = recoveriesRequired;

        // Refresh "triviality"
        triviality = unsafeIDs > 0; 

        // Refresh "forcedPlay"
        forcedPlay = unsafeIDs > 0 && unsafeIDs == remainingEpochs;
        printf("\n\tremainingEpochs\t%d\n\tunsafeIDs\t%d\n", remainingEpochs, unsafeIDs);
        assert( remainingEpochs >= unsafeIDs );

        // Refresh "revealRoot"
        revealRoot = !challenge[t] && (t != LAST_EPOCH) && attackerKnowledge[t].node[ROOT] == UnknownNode;
        if
        :: !revealRoot -> skip
        :: else ->
            byte challengesUsed = 0;
            d_step
            {
                for ( i : 0 .. t )
                {
                    if
                    :: challenge[i] -> challengesUsed++;
                    :: else
                    fi
                }
            };
            revealRoot = challengesUsed < MAX_REVEAL;
        fi

        // Refresh "commitmentRequired"
        bool canHoardMember = false;
        d_step
        {
            byte candidateHoarders;
            candidates_for_hoarding();
            canHoardMember = candidateHoarders > 0;
    //        printf("\n canHoardMember = %d", canHoardMember);
        }
    
        bool canCorruptMember = false;
        d_step
        {
            byte candidateCorruptibles;
            candidates_for_corruption( t );
            canCorruptMember = candidateCorruptibles > 0;
    //        printf("\n canCorruptMember = %d", canCorruptMember);
        }
    
        commitmentRequired = !revealRoot && !canHoardMember && !canCorruptMember
    }
}


/****
  * External result variable(s):
  *   - absentees
  *   - attendees
  *   - groupDyad
  *   - groupFull
  *   - groupMost
****/
inline take_attendance()
{
    byte largestID
    d_step {
        byte included = 0;
        for ( i : 0 .. N - 1 ) {
             if
             :: membership[i] -> included++; largestID = i
             :: else
             fi
        }
        attendees = included;
        absentees = N - attendees;
        groupDyad = attendees == 2;
        groupFull = absentees == 0;
    }

    if
    :: largestID + 1 > groupMost -> groupMost = largestID + 1;
    :: else
    fi
    d_step
    {
        printf("\n\tattendees \t%d", attendees );
        printf("\n\tabsentees \t%d", absentees );
        printf("\n\tgroupDyad \t%d", groupDyad );
        printf("\n\tgroupFull \t%d", groupFull );
        printf("\n\tgroupMost \t%d", groupMost );
    }
}


/********
    *
    * User ID selection inlines:
    *   - select_corrupted
    *   - select_banisher
    *   - select_exiled
    *   - select_hoarder
    *   - select_joiner
    *   - select_sender
    *   - select_updater
    *
********/


/****
  * External result variable(s):
  *   - corruptedID
****/
inline select_corrupted( t )
{   atomic {

    byte candidateCorruptibles;
    candidates_for_corruption( t );
    if
    :: candidateCorruptibles == 0 -> corruptedID = NONE
    :: else ->
        byte sample;
        select ( sample : 0 .. candidateCorruptibles - 1 );
        byte selection = NONE;
        d_step
        {
            for ( i : 0 .. N )
            {
                if
                :: selection == NONE ->
                    bool candidateCorruption;
                    candidate_corruption( i );
                    if
                    :: candidateCorruption ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    :: else
                    fi
                :: else
                fi
            }
        }
        corruptedID = selection
    fi
}   }


/****
  * External result variable(s):
  *   - candidateCorruptibles
****/
inline candidates_for_corruption( t )
{
    byte remaining = LAST_EPOCH - t;

    if
    :: unsafeIDs >= remaining -> candidateCorruptibles = 0;
    :: else ->
        byte candidates = 0;
        d_step
        {
            for ( i : 0 .. N - 1 )
            {
                bool candidateCorruption;
                candidate_corruption( i );
                if
                :: candidateCorruption -> candidates++
                :: else
                fi
            }
        }
        candidateCorruptibles = candidates
    fi
}


/****
  * External result variable(s):
  *   - candidateCorruption
****/
inline candidate_corruption( i )
{
    // The corrupted user must not previously been instructed to hoard!
    // Violates the "Safety Predicate SAFE" described in Alwen 2020.
    candidateCorruption = hoarding[i] == NONE && membership[i] && attackerKnowledge[t].node[NODE+i] == UnknownNode
}


/****
  * External result variable(s):
  *   - banisherID
****/
inline select_banisher( banned )
{
    byte selectedID;
    select_sender_constrained( banned, false );
    banisherID = selectedID;
}


/****
  * External result variable(s):
  *   - exiledID
****/
inline select_exiled( forced )
{
    byte selectedID;
    select_sender_constrained( NONE, forced );
    exiledID = selectedID;
}


/****
  * External result variable(s):
  *   - hoarderID
****/
inline select_hoarder()
{   atomic {

    byte candidateHoarders;
    candidates_for_hoarding();

    if
    :: candidateHoarders == 0 -> hoarderID = NONE
    :: else ->
        byte sample;
        select ( sample : 0 .. candidateHoarders - 1 );
        byte selection = NONE;
        d_step
        {
            for ( i : 0 .. N - 1 )
            {
                if
                :: selection != NONE -> skip
                :: else ->
                    bool candidateHoarder
                    candidate_hoarder( i );
                    if
                    :: !(candidateHoarder) -> skip
                    :: else ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    fi
                fi
            }
        }
        hoarderID = selection
    fi
}   }


/****
  * External result variable(s):
  *   - candidateHoarders
****/
inline candidates_for_hoarding()
{
    byte candidates = 0;
    for ( i : 0 .. N - 1 )
    {
        bool candidateHoarder
        candidate_hoarder( i );
        if
        :: candidateHoarder -> candidates++
        :: else
        fi
    }
    candidateHoarders = candidates
}


/****
  * External result variable(s):
  *   - candidateHoarder
****/
inline candidate_hoarder( i )
{
    candidateHoarder = hoarding[i] == NONE && membership[i]
}


/****
  * External result variable(s):
  *   - joinerID
****/
inline select_joiner()
{   atomic {

    byte candidateJoiners;
    candidates_for_joiner();

    byte sample;
    byte selection = NONE;
    select( sample : 0 .. candidateJoiners - 1 );

    for ( i : 0 .. N - 1 ) {
        if
        :: selection != NONE || membership[i] -> skip
        :: else ->
            if
            :: sample != 0 -> sample--
            :: sample == 0 -> selection = i
            fi
        fi
    }
    
    joinerID = selection;
}   }


/****
  * External result variable(s):
  *   - candidateJoiners
****/
inline candidates_for_joiner()
{
    byte candidates = 0;
    for ( i : 0 .. groupMost - 1 )
    {
        if
        :: !(membership[i]) -> candidates++
        :: else
        fi
    }

    printf("Candidate Joiners (1): %d", candidates);

    // Consider adding the next user who has never been a member before...
    // but make the consideration *if and only if* such a user exists.
    if
    :: groupMost == N -> skip
    :: else -> candidates++
    fi
    
    printf("Candidate Joiners (2): %d", candidates);

    candidateJoiners = candidates
}


/****
  * External result variable(s):
  *   - senderID
****/
inline select_sender()
{
    byte selectedID;
    select_sender_constrained( NONE, false );
    senderID = selectedID;
}


/****
  * External result variable(s):
  *   - updaterID
****/
inline select_updater( forced )
{
    byte selectedID;
    select_sender_constrained( NONE, forced );
    updaterID = selectedID;
}


/****
  * External result variable(s):
  *   - selectedID
****/
inline select_sender_constrained ( banned, forced )
{   atomic {
//    printf("\nSELECTING Sender %d %d %d", banned, forced);
    byte candidates = 0;
    d_step {
        for ( i : 0 .. N - 1 ) {
/*
             d_step
             {
                 printf("\n  membership[%d]     = %d", i, membership[i]);
                 printf("\n  i != banned        = %d", i != banned  );
                 printf("\n  !forced            = %d", !(forced)    );
                 printf("\n  !epochQuerried[%d] = %d", i, !(epochQuerried[i]));
                 printf("\n  unsafe[%d]         = %d", i, unsafe[i]);
                 printf("\n");
                 printf("\n")
             }
*/
             bool senderCandidate;
             sender_candidate( banned, forced, i );
             if
             :: senderCandidate -> candidates++
             :: else
             fi
        }
    }

    if
    :: candidates == 0 -> selectedID = NONE
    :: else ->
        byte sample;
        select( sample : 0 .. candidates - 1 );
        byte selection = NONE;
        d_step
        {
    /**/
            printf("\n  candidates         = %d", candidates);
            printf("\n  sample             = %d", sample);
    /**/
    
            for ( i : 0 .. N - 1 ) {
//                printf("\n\ti = %d v = %d s = %d b = %d", i, selection, sample, membership[i] && i != banned && ( !(forced) || unsafe[i]) );
                if
                :: selection == NONE ->
                    bool senderCandidate;
                    sender_candidate( banned, forced, i );
                    if
                    :: senderCandidate ->
                        if
                        :: sample == 0 -> selection = i
                        :: sample != 0 -> sample--
                        fi
                    :: else
                    fi
                :: else
                fi
            }
        }
        selectedID = selection;
    fi
}   }


/****
  * External result variable(s):
  *   - senderCandidate
****/
inline sender_candidate( banned, forced, i )
{
//    bool querryOkay = commitment || !(epochQuerried[i]);
//    bool forcesSafe = (!(forced) && querryOkay) || unsafe[i];
    bool forcesSafe = !(forced)  || unsafe[i];
    bool isAnOption = membership[i] && (i != banned);
    senderCandidate = isAnOption && forcesSafe
}


/****
  *
  * The following methods:
  *   - broadcast
  *   - propogate
  *
  * Are used by the security game moves:
  *   - insert_member
  *   - remove_member
  *   - oblige_update
  *
****/


inline broadcast ( t, sender, subject )
{
    attacker_observes_message( t, sender, subject );
}


inline propogate ( sender, insert, remove )
{
    d_step {
        if
        :: insert != NONE -> membership[insert] = true
        :: remove != NONE -> membership[remove] = false
        :: else
        fi

        take_attendance();
    }
}


/****
  *
  * The following methods:
  *   - attacker_initializes_knowledge
  *   - attacker_insight_check
  *   - attacker_observes_message
  *
  * Are used by the security game moves:
  *   - broadcast
  *   - CGKA_initialize
  *   - corrupt
  *
****/


inline attacker_initializes_knowledge()
{
    d_step
    {
        for( i : 0 .. T - 1 )
        {
            for( j : 0 .. TREE - 1 )
            {
                attackerKnowledge[i].node[j] = Void
            }
        }
        attackerKnowsRootKey = false;
    }
}


inline attacker_observes_message( t, sender, subject )
{
    atomic
    {
        // If the attacker has know knowledge of the epoch,
        // meaning that all cell values are "Void,"
        // then it is the first time we have entered the epoch
        // and the cell values should be initialized as either:
        //   * UnknownNode
        //   * UnknownRefs
        //   *        Void
        bool noEpochKnowledge;
        attacker_has_no_epoch_knowledge( t );
        if
        :: noEpochKnowledge -> attacker_init_epoch_knowledge( t );
        :: else
        fi
        
        //   referenceEpoch = (t == 0) ? t : t - 1;
        byte referenceEpoch = t ;
        if
        :: t != 0 -> referenceEpoch--;
        :: else
        fi

        attacker_copy_epoch_knowledge( referenceEpoch );
        attacker_wipe_sender_knowledge( sender, t );
        attacker_updates_knowledge ( t );
        attacker_insight_check( t );
    }
}

inline attacker_insight_check( t )
{
    bool anyRootKnown = false;
    d_step
    {
        for( i : 0 .. t )
        {
            anyRootKnown = anyRootKnown || attackerKnowledge[i].node[ROOT]
        }
    }
    attackerKnowsRootKey = anyRootKnown;
}



inline attacker_has_no_epoch_knowledge ( e )
{
    d_step
    {
        bool allVoid = true;
        for ( i : 0 .. TREE - 1 )
        {
            allVoid = allVoid && (attackerKnowledge[e].node[i] == Void)
        }
        noEpochKnowledge = allVoid;
    }
}


inline attacker_init_epoch_knowledge( e )
{   atomic {

    bool leaves = true;
    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                // Leaf node case(s)
                if
                :: leaves ->
                    if
                    // No knowledge from excluded group members
                    :: !(membership[i]) -> attackerKnowledge[e].node[j] = Void
                    :: else             -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                // Internal node case(s)
                :: else ->
                    byte childL = j * 2 + 1;
                    byte childR = j * 2 + 2;
                    // Check current epoch for existance of subtrees
                    bool existanceOfSubtree;
                    existance_of_subtree( e, childL);
                    bool voidL = !existanceOfSubtree;
                    existance_of_subtree( e, childR);
                    bool voidR = !existanceOfSubtree;
                    if
                    ::  voidL &&  voidR -> attackerKnowledge[e].node[j] =        Void
                    :: !voidL &&  voidR -> attackerKnowledge[e].node[j] = UnknownRefs
                    ::  voidL && !voidR -> attackerKnowledge[e].node[j] = UnknownRefs
                    :: !voidL && !voidR -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                fi
            };
            offset = offset / 2;
            leaves = false;
        }
    od
}   }


inline attacker_copy_epoch_knowledge( e )
{   atomic {

    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                bool knowledgeOfSubtree;
                knowledge_of_subtree( e, j);
                if
                ::  attackerKnowledge[e+1].node[j] == UnknownNode && knowledgeOfSubtree ->
                    attackerKnowledge[e+1].node[j] = KnownNode
                ::  attackerKnowledge[e+1].node[j] == UnknownRefs && knowledgeOfSubtree ->
                    attackerKnowledge[e+1].node[j] = KnownRefs
                :: else
                fi
            };
            offset = offset / 2;
        }
    od
}   }


inline attacker_wipe_sender_knowledge( sender, e )
{   atomic {

    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            j = offset + sender;
            if
            ::  attackerKnowledge[e].node[j] == UnknownNode ||
                attackerKnowledge[e].node[j] ==   KnownNode ->
                attackerKnowledge[e].node[j] =  UnknownNode
            ::  attackerKnowledge[e].node[j] == UnknownRefs ||
                attackerKnowledge[e].node[j] ==   KnownRefs ->
                attackerKnowledge[e].node[j] =  UnknownRefs
            :: else
            fi
            offset = offset / 2;
        }
    od
}   }


inline attacker_updates_knowledge( e )
{   atomic {

    bool leaves = true;
    byte offset = NODE;
    byte width  = TREE + 1;
    do
    :: width == 0 -> break
    :: width != 0 -> d_step
        {
            width = width / 2;
            for ( i : 0 .. width - 1 )
            {
                j = offset + i;
                if
                :: leaves -> skip
                :: else ->
                    byte childL = j * 2 + 1;
                    byte childR = j * 2 + 2;
                    // Check current epoch for existance of subtrees
                    bool existanceOfSubtree;
                    existance_of_subtree( e, childL);
                    bool voidL = !existanceOfSubtree;
                    existance_of_subtree( e, childR);
                    bool voidR = !existanceOfSubtree;
                    // Check previous epoch for knowledge of subtrees
                    bool knowledgeOfSubtree;
                    knowledge_of_subtree( e, childL);
                    bool knowsL = knowledgeOfSubtree;
                    knowledge_of_subtree( e, childR);
                    bool knowsR = knowledgeOfSubtree;
                    
                    if
                    ::  voidL &&  voidR                       -> attackerKnowledge[e].node[j] =        Void
                    :: !voidL &&  voidR &&             knowsR -> attackerKnowledge[e].node[j] =   KnownRefs
                    :: !voidL &&  voidR &&            !knowsR -> attackerKnowledge[e].node[j] = UnknownRefs
                    ::  voidL && !voidR &&  knowsL            -> attackerKnowledge[e].node[j] =   KnownRefs
                    ::  voidL && !voidR && !knowsL            -> attackerKnowledge[e].node[j] = UnknownRefs
                    :: !voidL && !voidR &&  knowsL &&  knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR && !knowsL &&  knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR &&  knowsL && !knowsR -> attackerKnowledge[e].node[j] =   KnownNode
                    :: !voidL && !voidR && !knowsL && !knowsR -> attackerKnowledge[e].node[j] = UnknownNode
                    fi
                fi
            };
            offset = offset / 2;
            leaves = false;
        }
    od
    }
}


inline existance_of_subtree( i, j )
{
    existanceOfSubtree = attackerKnowledge[i].node[j] != Void
}


inline knowledge_of_subtree( i, j )
{
    knowledgeOfSubtree = attackerKnowledge[i].node[j] == KnownNode || attackerKnowledge[i].node[j] == KnownRefs
}


/********
    *
    * Oracles available to the attacker:
    *
    *   - Corrupt
    *   - Hoard
    *   - Reveal
    *
********/


inline corrupt( t, memberID )
{   atomic {

    // Learn the secret material of the user in their current epoch
    byte upperBound = t;
    byte lowerBound = upperBound;

    // Learn any additional secrets they have hoarded!
    byte epochSavedFrom = hoarding[memberID];
    if
    :: epochSavedFrom < upperBound -> lowerBound = epochSavedFrom
    :: else
    fi

    printf("Corrupting from: %d -- %d\n", lowerBound, upperBound);

    // For each epoch which the member has secrets
    // (this implies that the user was a member)
    // Then the attacker learns the secrets on the direct path
    // between the member and the root node on the LBBT.
    byte peek;
    for ( peek : lowerBound .. upperBound )
    {
        if
        :: !(membership[memberID]) -> skip
        :: else ->
            printf("Passed membership guard!\n");
            byte off   = NODE;
            byte level = TREE + 1;
            do
            :: level == 0 -> break
            :: level != 0 -> d_step
                {
                    level = level / 2;
                    k = off+memberID;
                    printf("tree level: %d @ %d\n", level, j);
                    if
                    :: attackerKnowledge[peek].node[k] == UnknownNode -> attackerKnowledge[peek].node[k] = KnownNode
                    :: attackerKnowledge[peek].node[k] == UnknownRefs -> attackerKnowledge[peek].node[k] = KnownRefs
                    :: else
                    fi
                    off = off / 2;
                }
                printf("Check Index Post: %d\n", peek);
                if
                :: i == upperBound ->
                    printf("UPPER BOUNDed %d\n", peek);
                    attacker_updates_knowledge( peek );
                :: else ->
                    printf("Lower Pre %d\n", peek);
                    attacker_copy_epoch_knowledge( peek  );
                    printf("Lower Post %d\n", peek);
                    attacker_updates_knowledge(   peek+1 );
                fi
                printf("Before hand off: %d\n", peek);
            od
        fi
    }
    attacker_insight_check( t );
    unsafe[memberID] = true;
}   }


inline hoard( t, memberID )
{
    hoarding[memberID] = t
}


inline reveal( t )
{
    d_step {
        challenge[t] = true;
        attackerKnowledge[t].node[ROOT] -> KnownNode;
    }
}


/********
    *
    * Oracles available to the Group Members:
    *
    *   - Insert Member ( ADD )
    *   - Remove Member ( RMV )
    *   - Oblige Update ( UPD )
    *
********/


// Precondition: joiner is not in the group!
inline insert_member( t, sender, joiner )
{
    d_step {
        assert(sender < N);
        assert(joiner < N);
        propogate( sender, joiner, NONE );
    }
    broadcast( t, sender, joiner );
}


// Precondition: exiledMemeber is in the group!
inline remove_member( t, sender, exiled )
{
    d_step {
        assert(sender < N);
        assert(exiled < N);
        unsafe[exiled] = false;
        propogate( sender, NONE, exiled);
    }
    broadcast( t, sender, exiled );
}


inline oblige_update( t, sender )
{
    d_step {
        assert(sender < N);
        unsafe[sender] = false;
        propogate( sender, NONE, NONE );
    }
    broadcast( t, sender, NONE );
}


/********
    *
    * Attacker moves interacting with oracles:
    *
    *   - play_move_with_commitment
    *   - play_move_without_commitment
    *
********/


inline play_move_with_commitment( t )
{
    byte exiledID, banisherID, updaterID;
    
    atomic
    {
        select_updater(  forcedPlay );
        select_exiled(   forcedPlay );
        select_banisher( exiledID   );
    };

    d_step
    {
        printf("\nEpoch (t) = %d\n", t);
        print_global_state()
        printf("\n\texiledID    \t%d",    exiledID );
        printf("\n\tbanisherID  \t%d",  banisherID );
        printf("\n\tupdaterID   \t%d",   updaterID );
        printf("\nCOMMITTING!\n");
    }

    do
    // Update
    :: updaterID != NONE -> atomic
        {   printf("\n> > >\n> CGKA: Game Move = oblige_update %d (committed? %d)\n> > >\n", updaterID, true);
            oblige_update( t, updaterID );
        }; break

    // Remove
    :: !groupDyad && exiledID != NONE && banisherID != NONE -> atomic
        {  printf("\n> > >\n> CGKA: Game Move = remove_member %d %d (committed? %d)\n> > >\n", banisherID, exiledID, true);
            remove_member( t, banisherID, exiledID );
        }; break

    // Insert
    :: !groupFull && !forcedPlay -> atomic
        {
            byte joinerID, senderID;
            select_sender();
            select_joiner();
            printf("\n> > >\n> CGKA: Game Move = insert_member %d %d (committed? %d)\n> > >\n", senderID, joinerID, true);
            insert_member( t, senderID, joinerID );
        }; break
    od

    after_move_refresh( t + 1);
}


inline play_move_without_commitment( t )
{   atomic
    {
        byte corruptedID, hoarderID;
    
        atomic
        {
            select_corrupted( t );
            select_hoarder();
        };
    
        d_step
        {
            printf("\nEpoch (t) = %d\n", t);
            print_global_state()
            printf("\n\tcanRevealKey\t%d", revealRoot );
            printf("\n\tcorruptedID \t%d",     corruptedID );
            printf("\n\thoarderID   \t%d",       hoarderID );
            printf("\nNON-Committal!\n");
        }
    
        do
        //  Reveal
        :: revealRoot -> atomic
            {   printf("\n> > >\n> CGKA: Game Move = reveal %d\n> > >\n", t);
                reveal( t )
            }; break
    
        //  Corrupt
        :: corruptedID != NONE && !forcedPlay -> atomic
            {   printf("\n> > >\n> CGKA: Game Move = corrupt %d\n> > >\n", corruptedID);
                corrupt( t, corruptedID )
            }; break
    
        //  Hoard
        :: hoarderID != NONE -> atomic
            {   printf("\n> > >\n> CGKA: Game Move = hoard %d\n> > >\n", hoarderID);
                hoard( t, hoarderID )
            }; break
        od
    
        after_move_refresh( t );
    }
}


/********
    *
    * Initialization inline routines, in order of execution:
    *
    *   - Initialize
    *   - Select Group
    *   - Create Group
    *   - CGKA Security Game
    *
********/


inline CGKA_initialize()
{   atomic {
    d_step
    {
        printf("\n***********************\n* CGKA: Initialize!   *\n***********************\n");
        
        for( i : 0 .. N - 1 )
        {
            hoarding[i]  = NONE;
        };
    
        for( i : 0 .. T - 1 )
        {
            challenge[i] = false;
        };
        
        concludedCGKA = false;
        triviality    = false; 

        attacker_initializes_knowledge()
    };

}   }


inline CGKA_create_group()
{   atomic {
    byte id0, n, t;
    
    // Number of members to add
    select ( n : 2 .. N );
    for( i : 0 .. N - 1 )
    {
        membership[i] = i < n;
    };

    // Set the "lead" byte to be the first member in the group.
    d_step
    {
        printf("\n***********************\n* CGKA: Create Group! *\n***********************\n");
        id0 = 0;
        t   = 0;
        print_membership();
        propogate ( id0, NONE, NONE );
        broadcast ( t,    id0, NONE );
    }
}   }



inline CGKA_security_game()
{
    printf("\n***********************\n* CGKA: Begin Play!   *\n***********************\n");

    // Each time the attacker takes a turn, they must decide whether or not to:
    //
    //   1. End the game; under the assumption that the attacker has won.
    //   2. Play a move which will *commit* the group members to advance to the next epoch
    //   3. Play a move which where the group members remain in the current epoch
    //
    // We call selection the options "challenge," "commitment," and "non-committal" moves, respectively.
    //
    // NOTE: option (1), is implicitly the last move in the model

    bool commitmentRequired = false;

    // Loop through all epochs
    for ( t : 0 .. LAST_EPOCH)
    {

        do
        // 1. Play the Challenge Move
        //     The attacker ending the game is implicitly the last move of the model
        //     so it always happens in the last epoch.
        :: t == LAST_EPOCH -> break
        
        // 2. Play a Commitment Move
        //     The attacker *may* play a move which commits to a new epoch...
        //     unless it is the last epoch.
        :: t != LAST_EPOCH -> play_move_with_commitment( t ); break
        
        // 3. Play a Non-commital Move
        //     The attacker *may* play a move and remain in the same epoch...
        //     unless the attacker has exhausted all indempotent non-comittal moves!
        :: !(commitmentRequired) -> play_move_without_commitment( t )
        od;

        // After the operation is complete, check to see if the an endgame condition has been reached.
        printf("\nLOOP broken: %d", t);
        printf ("\n< < <\n< Moves:   %d\n< Unsafe:  %d\n< < < \n", LAST_EPOCH - t, unsafeIDs);
    }
}


init
{
    CGKA_initialize();
    CGKA_create_group();
    CGKA_security_game();
    concludedCGKA = true;
}

//ltl tivial_safety { [](triviality <-> attackerKnowsRootKey) }
//ltl finished_loop { <>concludedCGKA }
//ltl attendees_more_than_one { [](attendees > 1) }
//ltl attendees_absentees_sum { [](attendees + absentees == N) }
